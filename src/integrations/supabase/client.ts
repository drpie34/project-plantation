// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://vrplqxtwporuulgazizx.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZycGxxeHR3cG9ydXVsZ2F6aXp4Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDI4NTc5MjUsImV4cCI6MjA1ODQzMzkyNX0.chIcV8_Uq-4-kb4NdolZZ1bG0mTEXgM2X70sVSLXgvk";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Add try/catch to handle any initialization errors
let supabaseClient;
try {
  console.log("Initializing Supabase client...");
  supabaseClient = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);
  console.log("Supabase client initialized successfully");
} catch (error) {
  console.error("Error initializing Supabase client:", error);
  // Create a dummy client that logs errors instead of crashing
  supabaseClient = {
    auth: {
      getSession: () => Promise.resolve({ data: { session: null }, error: null }),
      onAuthStateChange: () => ({ data: { subscription: { unsubscribe: () => {} } } }),
      signUp: () => Promise.resolve({ error: new Error("Supabase client not available") }),
      signInWithPassword: () => Promise.resolve({ error: new Error("Supabase client not available") }),
      signOut: () => Promise.resolve()
    },
    from: () => ({
      select: () => ({ eq: () => ({ single: () => Promise.resolve({ data: null, error: null }) }) }),
      insert: () => ({ select: () => ({ single: () => Promise.resolve({ data: null, error: null }) }) }),
      update: () => ({ eq: () => ({ select: () => ({ single: () => Promise.resolve({ data: null, error: null }) }) }) })
    })
  };
}

export const supabase = supabaseClient;