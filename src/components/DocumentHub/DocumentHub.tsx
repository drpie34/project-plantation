import { useState } from 'react';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Badge } from '@/components/ui/badge';
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { ScrollArea } from '@/components/ui/scroll-area';
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from '@/components/ui/alert-dialog';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { FileIcon, MessageSquare, UploadIcon, RefreshCw, Trash2, Download, Edit, FileText, Copy, ExternalLink, LayoutGrid, LayoutList, Calendar, ClipboardList } from 'lucide-react';
import { Document } from '@/types/supabase';

type DocumentHubProps = {
  projectId: string;
  documents: Document[];
  onUploadDocument: (file: File) => Promise<void>;
  onDeleteDocument: (documentId: string) => Promise<void>;
  onDownloadDocument: (document: Document) => void;
  onStartChat: () => void;
};

export default function DocumentHub({
  projectId,
  documents,
  onUploadDocument,
  onDeleteDocument,
  onDownloadDocument,
  onStartChat
}: DocumentHubProps) {
  const [uploadDialogOpen, setUploadDialogOpen] = useState(false);
  const [selectedDocument, setSelectedDocument] = useState<Document | null>(null);
  const [fileToUpload, setFileToUpload] = useState<File | null>(null);
  const [documentTitle, setDocumentTitle] = useState('');
  const [viewMode, setViewMode] = useState<'list' | 'card'>('card');
  
  const autoGeneratedDocs = documents.filter(doc => doc.is_auto_generated);
  const uploadedDocs = documents.filter(doc => !doc.is_auto_generated);
  
  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      const file = e.target.files[0];
      setFileToUpload(file);
      if (!documentTitle) {
        setDocumentTitle(file.name.split('.')[0]);
      }
    }
  };
  
  const handleUpload = async () => {
    if (fileToUpload) {
      await onUploadDocument(fileToUpload);
      setUploadDialogOpen(false);
      setFileToUpload(null);
      setDocumentTitle('');
    }
  };
  
  const getDocumentTypeLabel = (type: Document['type']) => {
    switch (type) {
      case 'project_overview': return 'Project Overview';
      case 'market_research': return 'Market Research';
      case 'project_planning': return 'Project Planning';
      case 'design_development': return 'Design & Development';
      case 'chat_transcript': return 'Chat Transcript';
      case 'uploaded': return 'Uploaded Document';
      default: return type;
    }
  };
  
  const getDocumentTypeColor = (type: Document['type']) => {
    switch (type) {
      case 'project_overview': return 'bg-blue-100 text-blue-800';
      case 'market_research': return 'bg-green-100 text-green-800';
      case 'project_planning': return 'bg-purple-100 text-purple-800';
      case 'design_development': return 'bg-amber-100 text-amber-800';
      case 'chat_transcript': return 'bg-cyan-100 text-cyan-800';
      case 'uploaded': return 'bg-gray-100 text-gray-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };
  
  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleString();
  };

  // Function to parse and display project overview content with section handling - simplified for reliability
  const parseProjectOverviewContent = (content: string) => {
    // Extract sections with ultra direct and simple approach
    const sections: Record<string, string> = {
      description: 'No description provided yet.',
      goals: 'No goals defined yet.',
      features: 'No key features defined yet.',
      considerations: 'No additional considerations defined yet.'
    };
    
    // Parse the project overview content
    
    // Helper function to extract a section safely
    const extractSection = (sectionName: string) => {
      const startMarker = `<!-- SECTION:${sectionName} -->`;
      const endMarker = `<!-- END:${sectionName} -->`;
      
      const startPos = content.indexOf(startMarker);
      const endPos = content.indexOf(endMarker);
      
      
      if (startPos !== -1 && endPos !== -1 && startPos < endPos) {
        const contentStart = startPos + startMarker.length;
        const extractedContent = content.substring(contentStart, endPos).trim();
        
        if (extractedContent) {
          return extractedContent;
        } else {
        }
      } else {
        // Missing valid section markers
      }
      
      return sections[sectionName]; // Return default content
    };
    
    // Extract each section separately
    const extractedDescription = extractSection('description');
    if (extractedDescription) sections.description = extractedDescription;
    
    const extractedGoals = extractSection('goals');
    if (extractedGoals) sections.goals = extractedGoals;
    
    const extractedFeatures = extractSection('features');
    if (extractedFeatures) sections.features = extractedFeatures;
    
    const extractedConsiderations = extractSection('considerations');
    if (extractedConsiderations) sections.considerations = extractedConsiderations;
    
    // Get title from the first line if it starts with #
    const lines = content.split('\n');
    const title = lines[0].startsWith('# ') ? lines[0].substring(2) : 'Project Overview';
    
    // Create a formatted display with sections
    return (
      <div className="space-y-6">
        <h1 className="text-2xl font-bold">{title}</h1>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div className="bg-blue-50 border border-blue-100 rounded-lg p-4">
            <h3 className="text-blue-800 font-medium mb-2">Description</h3>
            {sections.description.split('\n').map((line, i) => (
              <p key={`desc-${i}`} className="text-sm my-1">{line}</p>
            ))}
          </div>
          
          <div className="bg-green-50 border border-green-100 rounded-lg p-4">
            <h3 className="text-green-800 font-medium mb-2">Goals</h3>
            {sections.goals.split('\n').map((line, i) => (
              line.startsWith('- ') 
                ? <li key={`goals-${i}`} className="text-sm ml-4 my-1">{line.substring(2)}</li>
                : <p key={`goals-${i}`} className="text-sm my-1">{line}</p>
            ))}
          </div>
          
          <div className="bg-purple-50 border border-purple-100 rounded-lg p-4">
            <h3 className="text-purple-800 font-medium mb-2">Key Features</h3>
            {sections.features.split('\n').map((line, i) => (
              line.startsWith('- ') 
                ? <li key={`feat-${i}`} className="text-sm ml-4 my-1">{line.substring(2)}</li>
                : <p key={`feat-${i}`} className="text-sm my-1">{line}</p>
            ))}
          </div>
          
          <div className="bg-amber-50 border border-amber-100 rounded-lg p-4">
            <h3 className="text-amber-800 font-medium mb-2">Additional Considerations</h3>
            {sections.considerations.split('\n').map((line, i) => (
              line.startsWith('- ') 
                ? <li key={`cons-${i}`} className="text-sm ml-4 my-1">{line.substring(2)}</li>
                : <p key={`cons-${i}`} className="text-sm my-1">{line}</p>
            ))}
          </div>
        </div>
      </div>
    );
  };
  
  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h2 className="text-2xl font-bold">Document Hub</h2>
        <div className="flex gap-2">
          <div className="flex mr-2 bg-gray-100 rounded-md p-1">
            <Button 
              variant={viewMode === 'card' ? 'default' : 'ghost'} 
              size="sm"
              className={`px-2 ${viewMode === 'card' ? '' : 'text-gray-600'}`}
              onClick={() => setViewMode('card')}
            >
              <LayoutGrid className="h-4 w-4" />
            </Button>
            <Button 
              variant={viewMode === 'list' ? 'default' : 'ghost'} 
              size="sm"
              className={`px-2 ${viewMode === 'list' ? '' : 'text-gray-600'}`}
              onClick={() => setViewMode('list')}
            >
              <LayoutList className="h-4 w-4" />
            </Button>
          </div>
          <Button 
            variant="outline" 
            onClick={() => setUploadDialogOpen(true)}
            className="flex items-center gap-1"
          >
            <UploadIcon className="h-4 w-4" />
            Upload Document
          </Button>
          <Button 
            onClick={onStartChat}
            className="flex items-center gap-1"
          >
            <MessageSquare className="h-4 w-4" />
            Start AI Chat
          </Button>
        </div>
      </div>
      
      <Tabs defaultValue="all" className="space-y-4">
        <TabsList>
          <TabsTrigger value="all">All Documents</TabsTrigger>
          <TabsTrigger value="auto">Auto-Generated</TabsTrigger>
          <TabsTrigger value="uploaded">Uploaded</TabsTrigger>
          <TabsTrigger value="chats">Chat Transcripts</TabsTrigger>
        </TabsList>
        
        <TabsContent value="all" className="space-y-4">
          {viewMode === 'list' ? (
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Document</TableHead>
                  <TableHead>Type</TableHead>
                  <TableHead>Updated</TableHead>
                  <TableHead className="w-[120px]">Actions</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {/* Filter out any legacy documents */}
                {documents.filter(doc => 
                  doc.title !== 'Document - project' && 
                  doc.type !== 'project'
                ).length > 0 
                  ? documents.filter(doc => 
                      doc.title !== 'Document - project' && 
                      doc.type !== 'project'
                    ).map(doc => (
                  <TableRow key={doc.id}>
                    <TableCell>
                      <div className="font-medium">{doc.title}</div>
                    </TableCell>
                    <TableCell>
                      <Badge className={getDocumentTypeColor(doc.type)}>
                        {getDocumentTypeLabel(doc.type)}
                      </Badge>
                    </TableCell>
                    <TableCell>{formatDate(doc.updated_at)}</TableCell>
                    <TableCell>
                      <div className="flex gap-2">
                        <Button
                          variant="ghost"
                          size="icon"
                          onClick={() => setSelectedDocument(doc)}
                        >
                          <FileText className="h-4 w-4" />
                        </Button>
                        <Button
                          variant="ghost"
                          size="icon"
                          onClick={() => onDownloadDocument(doc)}
                        >
                          <Download className="h-4 w-4" />
                        </Button>
                        <AlertDialog>
                          <AlertDialogTrigger asChild>
                            <Button
                              variant="ghost"
                              size="icon"
                              className="text-red-500 hover:text-red-700"
                            >
                              <Trash2 className="h-4 w-4" />
                            </Button>
                          </AlertDialogTrigger>
                          <AlertDialogContent>
                            <AlertDialogHeader>
                              <AlertDialogTitle>Delete Document</AlertDialogTitle>
                              <AlertDialogDescription>
                                Are you sure you want to delete this document? This action cannot be undone.
                              </AlertDialogDescription>
                            </AlertDialogHeader>
                            <AlertDialogFooter>
                              <AlertDialogCancel>Cancel</AlertDialogCancel>
                              <AlertDialogAction
                                onClick={() => onDeleteDocument(doc.id)}
                                className="bg-red-500 hover:bg-red-700"
                              >
                                Delete
                              </AlertDialogAction>
                            </AlertDialogFooter>
                          </AlertDialogContent>
                        </AlertDialog>
                      </div>
                    </TableCell>
                  </TableRow>
                )) : (
                  <TableRow>
                    <TableCell colSpan={4} className="text-center py-6 text-muted-foreground">
                      No documents available
                    </TableCell>
                  </TableRow>
                )}
              </TableBody>
            </Table>
          ) : (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              {/* Filter out any legacy documents that might appear */}
              {documents.filter(doc => 
                doc.title !== 'Document - project' && 
                doc.type !== 'project'
              ).length > 0 ? documents.filter(doc => 
                doc.title !== 'Document - project' && 
                doc.type !== 'project'
              ).map(doc => (
                <Card key={doc.id} className="overflow-hidden border hover:shadow-md transition-shadow">
                  <CardHeader className="p-4 pb-2 bg-gray-50">
                    <div className="flex justify-between items-start gap-2">
                      <Badge className={getDocumentTypeColor(doc.type)}>
                        {getDocumentTypeLabel(doc.type)}
                      </Badge>
                      <div className="flex gap-1">
                        <Button
                          variant="ghost"
                          size="sm"
                          className="h-8 w-8 p-0"
                          onClick={() => setSelectedDocument(doc)}
                        >
                          <FileText className="h-4 w-4" />
                        </Button>
                        <Button
                          variant="ghost"
                          size="sm"
                          className="h-8 w-8 p-0"
                          onClick={() => onDownloadDocument(doc)}
                        >
                          <Download className="h-4 w-4" />
                        </Button>
                        <AlertDialog>
                          <AlertDialogTrigger asChild>
                            <Button
                              variant="ghost"
                              size="sm"
                              className="h-8 w-8 p-0 text-red-500 hover:text-red-700"
                            >
                              <Trash2 className="h-4 w-4" />
                            </Button>
                          </AlertDialogTrigger>
                          <AlertDialogContent>
                            <AlertDialogHeader>
                              <AlertDialogTitle>Delete Document</AlertDialogTitle>
                              <AlertDialogDescription>
                                Are you sure you want to delete this document? This action cannot be undone.
                              </AlertDialogDescription>
                            </AlertDialogHeader>
                            <AlertDialogFooter>
                              <AlertDialogCancel>Cancel</AlertDialogCancel>
                              <AlertDialogAction
                                onClick={() => onDeleteDocument(doc.id)}
                                className="bg-red-500 hover:bg-red-700"
                              >
                                Delete
                              </AlertDialogAction>
                            </AlertDialogFooter>
                          </AlertDialogContent>
                        </AlertDialog>
                      </div>
                    </div>
                    <CardTitle className="text-md mt-2 cursor-pointer" onClick={() => setSelectedDocument(doc)}>
                      {doc.title}
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="p-4 pt-2">
                    <div className="text-sm text-gray-600 mb-2">
                      {doc.content
                        .replace(/<!-- SECTION:.*? -->/g, '')
                        .replace(/<!-- END:.*? -->/g, '')
                        .replace(/# .+?\n/, '')
                        .trim()
                        .split('\n')
                        .filter((line, i) => i < 3 && line.trim() !== '')
                        .join(' ')
                        .substring(0, 120)}
                      {doc.content.length > 120 ? '...' : ''}
                    </div>
                    <div className="flex items-center text-xs text-gray-500 mt-2">
                      <Calendar className="h-3 w-3 mr-1" />
                      {formatDate(doc.updated_at)}
                    </div>
                  </CardContent>
                </Card>
              )) : (
                <div className="col-span-3 flex justify-center items-center py-12 text-center text-muted-foreground">
                  <div>
                    <FileText className="h-12 w-12 mx-auto mb-4 text-gray-300" />
                    <p className="font-medium">No documents available</p>
                    <p className="text-sm mt-1">Upload or create a document to get started</p>
                    <Button 
                      variant="outline" 
                      className="mt-4"
                      onClick={() => setUploadDialogOpen(true)}
                    >
                      <UploadIcon className="h-4 w-4 mr-2" />
                      Upload Document
                    </Button>
                  </div>
                </div>
              )}
            </div>
          )}
        </TabsContent>
        
        <TabsContent value="auto" className="space-y-4">
          {viewMode === 'list' ? (
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Document</TableHead>
                  <TableHead>Type</TableHead>
                  <TableHead>Updated</TableHead>
                  <TableHead className="w-[120px]">Actions</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {/* Filter out any legacy documents */}
                {autoGeneratedDocs.filter(doc => 
                  doc.title !== 'Document - project' && 
                  doc.type !== 'project'
                ).length > 0 ? autoGeneratedDocs.filter(doc => 
                  doc.title !== 'Document - project' && 
                  doc.type !== 'project'
                ).map(doc => (
                  <TableRow key={doc.id}>
                    <TableCell>
                      <div className="font-medium">{doc.title}</div>
                    </TableCell>
                    <TableCell>
                      <Badge className={getDocumentTypeColor(doc.type)}>
                        {getDocumentTypeLabel(doc.type)}
                      </Badge>
                    </TableCell>
                    <TableCell>{formatDate(doc.updated_at)}</TableCell>
                    <TableCell>
                      <div className="flex gap-2">
                        <Button
                          variant="ghost"
                          size="icon"
                          onClick={() => setSelectedDocument(doc)}
                        >
                          <FileText className="h-4 w-4" />
                        </Button>
                        <Button
                          variant="ghost"
                          size="icon"
                          onClick={() => onDownloadDocument(doc)}
                        >
                          <Download className="h-4 w-4" />
                        </Button>
                      </div>
                    </TableCell>
                  </TableRow>
                )) : (
                  <TableRow>
                    <TableCell colSpan={4} className="text-center py-6 text-muted-foreground">
                      No auto-generated documents available
                    </TableCell>
                  </TableRow>
                )}
              </TableBody>
            </Table>
          ) : (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              {/* Filter out any legacy documents */}
              {autoGeneratedDocs.filter(doc => 
                doc.title !== 'Document - project' && 
                doc.type !== 'project'
              ).length > 0 ? autoGeneratedDocs.filter(doc => 
                doc.title !== 'Document - project' && 
                doc.type !== 'project'
              ).map(doc => (
                <Card key={doc.id} className="overflow-hidden border hover:shadow-md transition-shadow">
                  <CardHeader className="p-4 pb-2 bg-gray-50">
                    <div className="flex justify-between items-start gap-2">
                      <Badge className={getDocumentTypeColor(doc.type)}>
                        {getDocumentTypeLabel(doc.type)}
                      </Badge>
                      <div className="flex gap-1">
                        <Button
                          variant="ghost"
                          size="sm"
                          className="h-8 w-8 p-0"
                          onClick={() => setSelectedDocument(doc)}
                        >
                          <FileText className="h-4 w-4" />
                        </Button>
                        <Button
                          variant="ghost"
                          size="sm"
                          className="h-8 w-8 p-0"
                          onClick={() => onDownloadDocument(doc)}
                        >
                          <Download className="h-4 w-4" />
                        </Button>
                      </div>
                    </div>
                    <CardTitle className="text-md mt-2 cursor-pointer" onClick={() => setSelectedDocument(doc)}>
                      {doc.title}
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="p-4 pt-2">
                    <div className="text-sm text-gray-600 mb-2">
                      {doc.content
                        .replace(/<!-- SECTION:.*? -->/g, '')
                        .replace(/<!-- END:.*? -->/g, '')
                        .replace(/# .+?\n/, '')
                        .trim()
                        .split('\n')
                        .filter((line, i) => i < 3 && line.trim() !== '')
                        .join(' ')
                        .substring(0, 120)}
                      {doc.content.length > 120 ? '...' : ''}
                    </div>
                    <div className="flex items-center text-xs text-gray-500 mt-2">
                      <Calendar className="h-3 w-3 mr-1" />
                      {formatDate(doc.updated_at)}
                    </div>
                  </CardContent>
                </Card>
              )) : (
                <div className="col-span-3 flex justify-center items-center py-12 text-center text-muted-foreground">
                  <div>
                    <FileText className="h-12 w-12 mx-auto mb-4 text-gray-300" />
                    <p className="font-medium">No auto-generated documents available</p>
                  </div>
                </div>
              )}
            </div>
          )}
        </TabsContent>
        
        <TabsContent value="uploaded" className="space-y-4">
          {viewMode === 'list' ? (
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Document</TableHead>
                  <TableHead>Updated</TableHead>
                  <TableHead className="w-[120px]">Actions</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {uploadedDocs.filter(doc => doc.type === 'uploaded').length > 0 ? 
                  uploadedDocs.filter(doc => doc.type === 'uploaded').map(doc => (
                  <TableRow key={doc.id}>
                    <TableCell>
                      <div className="font-medium">{doc.title}</div>
                    </TableCell>
                    <TableCell>{formatDate(doc.updated_at)}</TableCell>
                    <TableCell>
                      <div className="flex gap-2">
                        <Button
                          variant="ghost"
                          size="icon"
                          onClick={() => setSelectedDocument(doc)}
                        >
                          <FileText className="h-4 w-4" />
                        </Button>
                        <Button
                          variant="ghost"
                          size="icon"
                          onClick={() => onDownloadDocument(doc)}
                        >
                          <Download className="h-4 w-4" />
                        </Button>
                        <AlertDialog>
                          <AlertDialogTrigger asChild>
                            <Button
                              variant="ghost"
                              size="icon"
                              className="text-red-500 hover:text-red-700"
                            >
                              <Trash2 className="h-4 w-4" />
                            </Button>
                          </AlertDialogTrigger>
                          <AlertDialogContent>
                            <AlertDialogHeader>
                              <AlertDialogTitle>Delete Document</AlertDialogTitle>
                              <AlertDialogDescription>
                                Are you sure you want to delete this document? This action cannot be undone.
                              </AlertDialogDescription>
                            </AlertDialogHeader>
                            <AlertDialogFooter>
                              <AlertDialogCancel>Cancel</AlertDialogCancel>
                              <AlertDialogAction
                                onClick={() => onDeleteDocument(doc.id)}
                                className="bg-red-500 hover:bg-red-700"
                              >
                                Delete
                              </AlertDialogAction>
                            </AlertDialogFooter>
                          </AlertDialogContent>
                        </AlertDialog>
                      </div>
                    </TableCell>
                  </TableRow>
                )) : (
                  <TableRow>
                    <TableCell colSpan={3} className="text-center py-6 text-muted-foreground">
                      No uploaded documents available
                    </TableCell>
                  </TableRow>
                )}
              </TableBody>
            </Table>
          ) : (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              {uploadedDocs.filter(doc => doc.type === 'uploaded').length > 0 ? 
                uploadedDocs.filter(doc => doc.type === 'uploaded').map(doc => (
                <Card key={doc.id} className="overflow-hidden border hover:shadow-md transition-shadow">
                  <CardHeader className="p-4 pb-2 bg-gray-50">
                    <div className="flex justify-between items-start gap-2">
                      <Badge className="bg-gray-100 text-gray-800">
                        Uploaded File
                      </Badge>
                      <div className="flex gap-1">
                        <Button
                          variant="ghost"
                          size="sm"
                          className="h-8 w-8 p-0"
                          onClick={() => setSelectedDocument(doc)}
                        >
                          <FileText className="h-4 w-4" />
                        </Button>
                        <Button
                          variant="ghost"
                          size="sm"
                          className="h-8 w-8 p-0"
                          onClick={() => onDownloadDocument(doc)}
                        >
                          <Download className="h-4 w-4" />
                        </Button>
                        <AlertDialog>
                          <AlertDialogTrigger asChild>
                            <Button
                              variant="ghost"
                              size="sm"
                              className="h-8 w-8 p-0 text-red-500 hover:text-red-700"
                            >
                              <Trash2 className="h-4 w-4" />
                            </Button>
                          </AlertDialogTrigger>
                          <AlertDialogContent>
                            <AlertDialogHeader>
                              <AlertDialogTitle>Delete Document</AlertDialogTitle>
                              <AlertDialogDescription>
                                Are you sure you want to delete this document? This action cannot be undone.
                              </AlertDialogDescription>
                            </AlertDialogHeader>
                            <AlertDialogFooter>
                              <AlertDialogCancel>Cancel</AlertDialogCancel>
                              <AlertDialogAction
                                onClick={() => onDeleteDocument(doc.id)}
                                className="bg-red-500 hover:bg-red-700"
                              >
                                Delete
                              </AlertDialogAction>
                            </AlertDialogFooter>
                          </AlertDialogContent>
                        </AlertDialog>
                      </div>
                    </div>
                    <CardTitle className="text-md mt-2 cursor-pointer" onClick={() => setSelectedDocument(doc)}>
                      {doc.title}
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="p-4 pt-2">
                    <div className="text-sm text-gray-600 mb-2">
                      {doc.content.substring(0, 120)}
                      {doc.content.length > 120 ? '...' : ''}
                    </div>
                    <div className="flex items-center text-xs text-gray-500 mt-2">
                      <Calendar className="h-3 w-3 mr-1" />
                      {formatDate(doc.updated_at)}
                    </div>
                  </CardContent>
                </Card>
              )) : (
                <div className="col-span-3 flex justify-center items-center py-12 text-center text-muted-foreground">
                  <div>
                    <UploadIcon className="h-12 w-12 mx-auto mb-4 text-gray-300" />
                    <p className="font-medium">No uploaded documents available</p>
                    <p className="text-sm mt-1">Upload a document to get started</p>
                    <Button 
                      variant="outline" 
                      className="mt-4"
                      onClick={() => setUploadDialogOpen(true)}
                    >
                      <UploadIcon className="h-4 w-4 mr-2" />
                      Upload Document
                    </Button>
                  </div>
                </div>
              )}
            </div>
          )}
        </TabsContent>
        
        <TabsContent value="chats" className="space-y-4">
          {viewMode === 'list' ? (
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Chat</TableHead>
                  <TableHead>Date</TableHead>
                  <TableHead className="w-[120px]">Actions</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {documents.filter(doc => doc.type === 'chat_transcript').length > 0 ? 
                  documents.filter(doc => doc.type === 'chat_transcript').map(doc => (
                  <TableRow key={doc.id}>
                    <TableCell>
                      <div className="font-medium">{doc.title}</div>
                    </TableCell>
                    <TableCell>{formatDate(doc.created_at)}</TableCell>
                    <TableCell>
                      <div className="flex gap-2">
                        <Button
                          variant="ghost"
                          size="icon"
                          onClick={() => setSelectedDocument(doc)}
                        >
                          <FileText className="h-4 w-4" />
                        </Button>
                        <Button
                          variant="ghost"
                          size="icon"
                          onClick={() => onDownloadDocument(doc)}
                        >
                          <Download className="h-4 w-4" />
                        </Button>
                        <Button
                          variant="ghost"
                          size="icon"
                          className="text-red-500 hover:text-red-700"
                          onClick={() => onDeleteDocument(doc.id)}
                        >
                          <Trash2 className="h-4 w-4" />
                        </Button>
                      </div>
                    </TableCell>
                  </TableRow>
                )) : (
                  <TableRow>
                    <TableCell colSpan={3} className="text-center py-6 text-muted-foreground">
                      No chat transcripts available
                    </TableCell>
                  </TableRow>
                )}
              </TableBody>
            </Table>
          ) : (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              {documents.filter(doc => doc.type === 'chat_transcript').length > 0 ? 
                documents.filter(doc => doc.type === 'chat_transcript').map(doc => (
                <Card key={doc.id} className="overflow-hidden border hover:shadow-md transition-shadow">
                  <CardHeader className="p-4 pb-2 bg-gray-50">
                    <div className="flex justify-between items-start gap-2">
                      <Badge className="bg-cyan-100 text-cyan-800">
                        Chat Transcript
                      </Badge>
                      <div className="flex gap-1">
                        <Button
                          variant="ghost"
                          size="sm"
                          className="h-8 w-8 p-0"
                          onClick={() => setSelectedDocument(doc)}
                        >
                          <FileText className="h-4 w-4" />
                        </Button>
                        <Button
                          variant="ghost"
                          size="sm"
                          className="h-8 w-8 p-0"
                          onClick={() => onDownloadDocument(doc)}
                        >
                          <Download className="h-4 w-4" />
                        </Button>
                        <Button
                          variant="ghost"
                          size="sm"
                          className="h-8 w-8 p-0 text-red-500 hover:text-red-700"
                          onClick={() => onDeleteDocument(doc.id)}
                        >
                          <Trash2 className="h-4 w-4" />
                        </Button>
                      </div>
                    </div>
                    <CardTitle className="text-md mt-2 cursor-pointer" onClick={() => setSelectedDocument(doc)}>
                      {doc.title}
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="p-4 pt-2">
                    <div className="text-sm text-gray-600 mb-2">
                      {doc.content.substring(0, 120)}
                      {doc.content.length > 120 ? '...' : ''}
                    </div>
                    <div className="flex items-center text-xs text-gray-500 mt-2">
                      <Calendar className="h-3 w-3 mr-1" />
                      {formatDate(doc.created_at)}
                    </div>
                  </CardContent>
                </Card>
              )) : (
                <div className="col-span-3 flex justify-center items-center py-12 text-center text-muted-foreground">
                  <div>
                    <MessageSquare className="h-12 w-12 mx-auto mb-4 text-gray-300" />
                    <p className="font-medium">No chat transcripts available</p>
                    <p className="text-sm mt-1">Start an AI chat to generate a transcript</p>
                    <Button 
                      variant="outline" 
                      className="mt-4"
                      onClick={onStartChat}
                    >
                      <MessageSquare className="h-4 w-4 mr-2" />
                      Start AI Chat
                    </Button>
                  </div>
                </div>
              )}
            </div>
          )}
        </TabsContent>
      </Tabs>
      
      {/* Document View Dialog */}
      <Dialog open={!!selectedDocument} onOpenChange={(open) => !open && setSelectedDocument(null)}>
        <DialogContent className="max-w-5xl max-h-[90vh] flex flex-col overflow-hidden">
          <DialogHeader>
            <DialogTitle className="text-xl">{selectedDocument?.title}</DialogTitle>
            <DialogDescription>
              <div className="flex justify-between items-center mt-1">
                {selectedDocument && (
                  <Badge className={getDocumentTypeColor(selectedDocument.type)}>
                    {getDocumentTypeLabel(selectedDocument.type)}
                  </Badge>
                )}
                <span className="text-xs text-gray-500">
                  Last updated: {selectedDocument && formatDate(selectedDocument.updated_at)}
                </span>
              </div>
            </DialogDescription>
          </DialogHeader>
          
          <div className="my-4 border-t border-b py-2 px-1 flex justify-between items-center">
            <div className="text-sm text-gray-600">
              Document content
            </div>
            <div className="flex gap-2">
              <Button 
                variant="outline"
                size="sm"
                onClick={() => selectedDocument && onDownloadDocument(selectedDocument)}
                className="flex items-center gap-1 h-8"
              >
                <Download className="h-3 w-3" />
                Download
              </Button>
              <Button 
                variant="ghost"
                size="sm"
                onClick={() => {
                  if (selectedDocument) {
                    navigator.clipboard.writeText(selectedDocument.content);
                    toast({
                      title: 'Copied',
                      description: 'Document copied to clipboard',
                    });
                  }
                }}
                className="flex items-center gap-1 h-8"
              >
                <Copy className="h-3 w-3" />
                Copy
              </Button>
            </div>
          </div>
          
          <ScrollArea className="flex-1 pr-4 max-h-[60vh] overflow-auto" style={{ maxHeight: '60vh' }} type="always">
            <div className="p-4">
              {selectedDocument && (
                <div className="prose prose-sm md:prose max-w-none">
                  {/* Parse and display document content with better section handling */}
                  {selectedDocument.type === 'project_overview' 
                    ? parseProjectOverviewContent(selectedDocument.content)
                    : selectedDocument.content
                        .replace(/<!-- SECTION:.*? -->/g, '')
                        .replace(/<!-- END:.*? -->/g, '')
                        .split('\n')
                        .map((line, index) => {
                          // Format Markdown headings
                          if (line.startsWith('# ')) {
                            return <h1 key={index} className="text-2xl font-bold mt-4 mb-2">{line.substring(2)}</h1>;
                          } else if (line.startsWith('## ')) {
                            return <h2 key={index} className="text-xl font-bold mt-4 mb-2">{line.substring(3)}</h2>;
                          } else if (line.startsWith('### ')) {
                            return <h3 key={index} className="text-lg font-bold mt-3 mb-2">{line.substring(4)}</h3>;
                          } else if (line.startsWith('- ')) {
                            // Format bullet points
                            return <li key={index} className="ml-4">{line.substring(2)}</li>;
                          } else if (line.trim() === '') {
                            return <div key={index} className="h-4"></div>; // Add spacing for empty lines
                          } else {
                            return <p key={index} className="my-2">{line}</p>;
                          }
                        })}
                  
                </div>
              )}
            </div>
          </ScrollArea>
          
          <DialogFooter className="mt-4 pt-2 border-t">
            <Button onClick={() => setSelectedDocument(null)}>Close</Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
      
      {/* Upload Dialog */}
      <Dialog open={uploadDialogOpen} onOpenChange={setUploadDialogOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Upload Document</DialogTitle>
            <DialogDescription>
              Upload a document to your project's document hub
            </DialogDescription>
          </DialogHeader>
          <div className="space-y-4 py-4">
            <div className="space-y-2">
              <label className="text-sm font-medium">Document Title</label>
              <Input
                placeholder="Enter document title"
                value={documentTitle}
                onChange={(e) => setDocumentTitle(e.target.value)}
              />
            </div>
            <div className="space-y-2">
              <label className="text-sm font-medium">File</label>
              <div className="border-2 border-dashed rounded-md p-6 text-center cursor-pointer hover:bg-gray-50 transition-colors">
                <input
                  type="file"
                  className="hidden"
                  id="file-upload"
                  onChange={handleFileChange}
                  accept=".pdf,.doc,.docx,.txt,.md"
                />
                <label htmlFor="file-upload" className="cursor-pointer">
                  {fileToUpload ? (
                    <div className="text-sm">
                      <p className="font-medium">{fileToUpload.name}</p>
                      <p className="text-gray-500">{(fileToUpload.size / 1024).toFixed(2)} KB</p>
                    </div>
                  ) : (
                    <div className="flex flex-col items-center gap-2">
                      <UploadIcon className="h-8 w-8 text-gray-400" />
                      <p className="text-sm font-medium">Click to upload or drag and drop</p>
                      <p className="text-xs text-gray-500">PDF, DOC, DOCX, TXT, MD (max. 10MB)</p>
                    </div>
                  )}
                </label>
              </div>
            </div>
          </div>
          <DialogFooter>
            <Button variant="outline" onClick={() => setUploadDialogOpen(false)}>Cancel</Button>
            <Button 
              onClick={handleUpload} 
              disabled={!fileToUpload || !documentTitle.trim()}
            >
              Upload
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
}