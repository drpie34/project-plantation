import { useEffect, useState } from 'react';
import { useParams, useNavigate, Link } from 'react-router-dom';
import { useAuth } from '@/context/AuthContext';
import { useToast } from '@/hooks/use-toast';
import {
  Button,
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
  Badge,
  Separator,
} from '@/components/ui';
import {
  ArrowLeft,
  PlusCircle,
  Settings,
  Share2,
  Trash2,
  Lightbulb,
  FileText,
  BarChart,
  FileSearch,
  Users,
  LayoutGrid as GanttIcon,
  MessageSquare,
  Folder,
  Code,
  Upload
} from 'lucide-react';
import { TabSystem, TabItem, PageHeader, CardContainer, LoadingSpinner, StatusBadge } from '@/components/common';
import { databaseService } from '@/services/databaseService';
import { documentService } from '@/services/documentService';
import { useErrorHandler } from '@/services/errorService';
import { UI_CONFIG } from '@/config';
import { Project, Idea, Document } from '@/types/supabase';
import ProjectSharingDialog from '@/components/Collaboration/ProjectSharingDialog';
import CollaborationTabs from '@/components/Collaboration/CollaborationTabs';
import DocumentHub from '@/components/DocumentHub/DocumentHub';
import DocumentChat from '@/components/DocumentHub/DocumentChat';

interface ProjectWithCollaboration {
  id: string;
  user_id: string;
  title: string;
  description: string | null;
  stage: 'ideation' | 'planning' | 'development' | 'launched';
  created_at: string;
  updated_at: string;
  is_collaborative: boolean;
  collaborators: string[];
  collaboration_settings: {
    permissions: 'view' | 'comment' | 'edit';
  };
}

export default function ProjectDetail() {
  const { projectId } = useParams<{ projectId: string }>();
  const [project, setProject] = useState<ProjectWithCollaboration | null>(null);
  const [ideas, setIdeas] = useState<Idea[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [activeTab, setActiveTab] = useState('overview');
  const [showDocumentChat, setShowDocumentChat] = useState(false);
  const [documents, setDocuments] = useState<Document[]>([]);
  const { user } = useAuth();
  const { toast } = useToast();
  const navigate = useNavigate();
  const { handleError } = useErrorHandler();

  useEffect(() => {
    if (projectId) {
      fetchProject();
      fetchIdeas();
    }
  }, [projectId]);
  
  // Second useEffect to fetch documents after project has loaded
  useEffect(() => {
    if (project && projectId) {
      console.log('Project loaded, now fetching documents');
      fetchDocuments();
    }
  }, [project, projectId]);
  
  async function fetchDocuments() {
    try {
      console.log('Fetching documents for project ID:', projectId);
      
      if (!projectId) return;
      
      // Use our document service to get project documents
      const docs = await documentService.getProjectDocuments(projectId);
      
      // Debug the documents
      console.log('==== DEBUG: Documents retrieved ====');
      console.log('Count:', docs.length);
      docs.forEach((doc, index) => {
        console.log(`Document ${index + 1}:`, {
          id: doc.id,
          title: doc.title,
          type: doc.type,
          projectId: doc.project_id,
          isAutoGenerated: doc.is_auto_generated,
          contentLength: doc.content.length,
          snippet: doc.content.substring(0, 100) + '...'
        });
      });
      console.log('==== END DEBUG ====');
      
      setDocuments(docs);
    } catch (error: any) {
      console.error('Error fetching documents:', error);
      handleError('ProjectDetail', 'fetchDocuments', error, {
        projectId
      });
    }
  }

  async function fetchProject() {
    setIsLoading(true);
    try {
      // Use our database service to get project by ID
      const { data, error } = await databaseService.getById<Project>('projects', projectId || '');

      if (error) throw error;
      if (!data) throw new Error('Project not found');
      
      const projectData: ProjectWithCollaboration = {
        id: data.id,
        user_id: data.user_id,
        title: data.title,
        description: data.description || null,
        stage: data.stage as 'ideation' | 'planning' | 'development' | 'launched',
        created_at: data.created_at,
        updated_at: data.updated_at,
        is_collaborative: data.is_collaborative || false,
        collaborators: data.collaborators || [],
        collaboration_settings: data.collaboration_settings 
          ? { permissions: (data.collaboration_settings as any).permissions as 'view' | 'comment' | 'edit' } 
          : { permissions: 'view' }
      };
      
      setProject(projectData);
    } catch (error: any) {
      console.error('Error fetching project:', error);
      handleError('ProjectDetail', 'fetchProject', error, {
        projectId
      });
    } finally {
      setIsLoading(false);
    }
  }

  async function fetchIdeas() {
    try {
      if (!projectId) return;
      
      // Use our database service to get ideas for this project
      const { data, error } = await databaseService.getAll<Idea>(
        'ideas',
        [{ column: 'project_id', operation: 'eq', value: projectId }],
        { orderBy: { column: 'created_at', ascending: false } }
      );

      if (error) throw error;
      
      if (data) {
        const ideasData: Idea[] = data.map(item => ({
          id: item.id,
          project_id: item.project_id,
          title: item.title,
          description: item.description || null,
          target_audience: item.target_audience || null,
          problem_solved: item.problem_solved || null,
          ai_generated_data: item.ai_generated_data,
          created_at: item.created_at,
          status: item.status as 'draft' | 'developing' | 'ready' | 'archived',
          tags: item.tags || [],
          inspiration_sources: (item.inspiration_sources || {}) as Record<string, any>,
          collaboration_settings: (item.collaboration_settings || { visibility: 'private' }) as { 
            visibility: 'private' | 'team' | 'public' 
          },
          version: item.version || 1,
          version_history: (item.version_history || []) as Record<string, any>[]
        }));
        
        setIdeas(ideasData);
      }
    } catch (error: any) {
      console.error('Error fetching ideas:', error);
      handleError('ProjectDetail', 'fetchIdeas', error, {
        projectId
      }, false); // Don't show a toast for this one
    }
  }

  if (isLoading) {
    return (
      <div className="flex justify-center items-center h-[calc(100vh-200px)]">
        <LoadingSpinner size="large" />
      </div>
    );
  }

  if (!project) {
    return (
      <div className="text-center py-12">
        <h2 className="text-2xl font-bold mb-2">Project Not Found</h2>
        <p className="text-muted-foreground mb-6">
          The project you're looking for doesn't exist or you don't have access to it.
        </p>
        <Button onClick={() => navigate('/projects')}>Back to Projects</Button>
      </div>
    );
  }

  const getStageDisplay = (stage: string) => {
    return <StatusBadge status={stage as any} />;
  };

  const handleProjectUpdate = (updatedProject: ProjectWithCollaboration) => {
    setProject(updatedProject);
  };
  
  const handleUploadDocument = async (file: File) => {
    try {
      if (!projectId || !user) {
        toast({
          title: 'Error',
          description: 'Missing project information',
          variant: 'destructive',
        });
        return;
      }
      
      // Use our document service to upload the document
      const newDocument = await documentService.uploadDocument(
        file,
        user.id,
        projectId
      );
      
      if (newDocument) {
        toast({
          title: 'Success',
          description: 'Document uploaded successfully',
        });
        
        // Refresh documents
        fetchDocuments();
      } else {
        throw new Error('Failed to upload document');
      }
    } catch (error: any) {
      console.error('Error uploading document:', error);
      handleError('ProjectDetail', 'handleUploadDocument', error);
    }
  };
  
  const handleDeleteDocument = async (documentId: string) => {
    try {
      // Use our document service to delete the document
      const success = await documentService.deleteDocument(documentId);
      
      if (success) {
        toast({
          title: 'Success',
          description: 'Document deleted successfully',
        });
        
        // Refresh documents
        fetchDocuments();
      } else {
        throw new Error('Failed to delete document');
      }
    } catch (error: any) {
      console.error('Error deleting document:', error);
      handleError('ProjectDetail', 'handleDeleteDocument', error);
    }
  };
  
  const handleDownloadDocument = (document: Document) => {
    // If document has a file path, open in new tab
    if (document.file_path) {
      window.open(document.file_path, '_blank');
      return;
    }
    
    // Otherwise create a text file from content
    const blob = new Blob([document.content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${document.title}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };
  
  const handleSaveTranscript = async (title: string, content: string) => {
    try {
      if (!projectId || !user) {
        toast({
          title: 'Error',
          description: 'Missing project information',
          variant: 'destructive',
        });
        return;
      }
      
      // Create a new document using our document service
      const newDocument = await documentService.createDocument({
        title,
        type: 'chat_transcript',
        content,
        project_id: projectId,
        user_id: user.id,
        is_auto_generated: false
      });
      
      if (newDocument) {
        toast({
          title: 'Success',
          description: 'Chat transcript saved successfully',
        });
        
        // Refresh documents
        fetchDocuments();
      } else {
        throw new Error('Failed to save transcript');
      }
    } catch (error: any) {
      console.error('Error saving transcript:', error);
      handleError('ProjectDetail', 'handleSaveTranscript', error);
    }
  };

  // Define the tab items for our standardized TabSystem
  const tabItems: TabItem[] = [
    { 
      id: 'overview',
      label: 'Overview',
      icon: <FileText className="h-4 w-4" />,
      content: (
        <div className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>Project Overview</CardTitle>
              <CardDescription>
                Key information about your SaaS project
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-6">
                <div>
                  <h3 className="font-medium mb-2">Description</h3>
                  <p className="text-gray-600">
                    {project.description || 'No description provided'}
                  </p>
                </div>
                
                {/* Display Project Overview Document */}
                {documents.filter(doc => doc.type === 'project_overview').length > 0 ? (
                  <div className="mt-6 border-t pt-4">
                    <h3 className="font-medium mb-3">Project Overview Document</h3>
                    <div className="prose max-w-none bg-blue-50 border border-blue-100 rounded-lg p-4">
                      {documents
                        .filter(doc => doc.type === 'project_overview')[0]
                        .content
                        .split('\n')
                        .map((line, idx) => (
                          <p key={idx}>{line}</p>
                        ))
                      }
                    </div>
                  </div>
                ) : (
                  <div className="bg-blue-50 border border-blue-100 rounded-lg p-4">
                    <h3 className="font-medium text-blue-800 mb-2">Next Step: Project Documentation</h3>
                    <p className="text-sm text-blue-700 mb-4">
                      Create a detailed project overview document to outline your plan, goals, and key features.
                    </p>
                    <Button
                      className="bg-blue-600 hover:bg-blue-700"
                      onClick={() => setActiveTab('document-hub')}
                    >
                      <FileText className="h-4 w-4 mr-2" />
                      Go to Document Hub
                    </Button>
                  </div>
                )}
              </div>
            </CardContent>
          </Card>
          <CollaborationTabs projectId={projectId || ''} />
        </div>
      )
    },
    {
      id: 'market-research',
      label: 'Market Research',
      icon: <BarChart className="h-4 w-4" />,
      content: (
        <div className="max-w-6xl mx-auto space-y-8">
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
            <div className="lg:col-span-2">
              <CardContainer
                title="Market Research"
                description="Analyze your market, competitors, and target audience"
              >
                <Button 
                  onClick={() => window.open(`/projects/${projectId}/market-research`, '_blank')}
                  className="w-full"
                >
                  Open Market Research Tools
                </Button>
              </CardContainer>
            </div>
            
            <div className="lg:col-span-1">
              <CardContainer
                title="Research Benefits"
              >
                <div className="space-y-4">
                  <div className="flex items-start gap-3">
                    <div className="bg-blue-100 text-blue-800 rounded-full p-1">
                      <BarChart className="h-4 w-4" />
                    </div>
                    <div>
                      <h4 className="text-sm font-medium">Market Analysis</h4>
                      <p className="text-sm text-gray-600">Understand market size, trends, and growth potential</p>
                    </div>
                  </div>
                  
                  <div className="flex items-start gap-3">
                    <div className="bg-green-100 text-green-800 rounded-full p-1">
                      <Users className="h-4 w-4" />
                    </div>
                    <div>
                      <h4 className="text-sm font-medium">User Personas</h4>
                      <p className="text-sm text-gray-600">Create detailed profiles of your target users</p>
                    </div>
                  </div>
                  
                  <div className="flex items-start gap-3">
                    <div className="bg-amber-100 text-amber-800 rounded-full p-1">
                      <FileSearch className="h-4 w-4" />
                    </div>
                    <div>
                      <h4 className="text-sm font-medium">Competitor Analysis</h4>
                      <p className="text-sm text-gray-600">Identify strengths and gaps in the competitive landscape</p>
                    </div>
                  </div>
                </div>
              </CardContainer>
            </div>
          </div>
        </div>
      )
    },
    {
      id: 'project-planning',
      label: 'Project Planning',
      icon: <GanttIcon className="h-4 w-4" />,
      content: (
        <div className="max-w-6xl mx-auto space-y-8">
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
            <div className="lg:col-span-2">
              <CardContainer
                title="Project Planning"
                description="Define your project scope, roadmap, and requirements"
              >
                <Button 
                  onClick={() => window.open(`/projects/${projectId}/planning`, '_blank')}
                  className="w-full"
                >
                  Open Project Planning Tools
                </Button>
              </CardContainer>
            </div>
            
            <div className="lg:col-span-1">
              <CardContainer title="Planning Benefits">
                <div className="space-y-4">
                  <div className="flex items-start gap-3">
                    <div className="bg-purple-100 text-purple-800 rounded-full p-1">
                      <FileText className="h-4 w-4" />
                    </div>
                    <div>
                      <h4 className="text-sm font-medium">Requirements</h4>
                      <p className="text-sm text-gray-600">Define functional and non-functional requirements</p>
                    </div>
                  </div>
                  
                  <div className="flex items-start gap-3">
                    <div className="bg-blue-100 text-blue-800 rounded-full p-1">
                      <GanttIcon className="h-4 w-4" />
                    </div>
                    <div>
                      <h4 className="text-sm font-medium">Timeline</h4>
                      <p className="text-sm text-gray-600">Create development phases and milestones</p>
                    </div>
                  </div>
                  
                  <div className="flex items-start gap-3">
                    <div className="bg-green-100 text-green-800 rounded-full p-1">
                      <Code className="h-4 w-4" />
                    </div>
                    <div>
                      <h4 className="text-sm font-medium">Tech Stack</h4>
                      <p className="text-sm text-gray-600">Select technologies and architecture for your project</p>
                    </div>
                  </div>
                </div>
              </CardContainer>
            </div>
          </div>
        </div>
      )
    },
    {
      id: 'design-development',
      label: 'Design & Development',
      icon: <Code className="h-4 w-4" />,
      content: (
        <CardContainer
          title="Design & Development"
          description="Design and technical aspects of your SaaS"
        >
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <CardContainer 
              title="Document Analysis"
              description="Analyze and extract insights from project documents"
              className="border shadow-sm"
            >
              <p className="text-sm text-muted-foreground mb-4">
                Upload documents like requirements, specifications, or research papers for AI analysis.
              </p>
              <Button 
                onClick={() => navigate(`/projects/${projectId}/document-analysis`)}
                className="w-full"
              >
                <FileSearch className="h-4 w-4 mr-2" />
                Go to Document Analysis
              </Button>
            </CardContainer>
            
            <CardContainer 
              title="Visual Planning"
              description="Create visual representations of your project"
              className="border shadow-sm"
            >
              <p className="text-sm text-muted-foreground mb-4">
                Create mind maps, Gantt charts, and other visual planning tools for your project.
              </p>
              <Button 
                onClick={() => navigate(`/projects/${projectId}/visual-planning`)}
                className="w-full"
              >
                <GanttIcon className="h-4 w-4 mr-2" />
                Go to Visual Planning
              </Button>
            </CardContainer>
          </div>
        </CardContainer>
      )
    },
    {
      id: 'document-hub',
      label: 'Document Hub',
      icon: <Folder className="h-4 w-4" />,
      content: showDocumentChat ? (
        <DocumentChat
          projectId={projectId || ''}
          documents={documents}
          onSaveTranscript={handleSaveTranscript}
          onBack={() => setShowDocumentChat(false)}
        />
      ) : (
        <DocumentHub
          projectId={projectId || ''}
          documents={documents}
          onUploadDocument={handleUploadDocument}
          onDeleteDocument={handleDeleteDocument}
          onDownloadDocument={handleDownloadDocument}
          onStartChat={() => setShowDocumentChat(true)}
        />
      )
    }
  ];

  return (
    <div className="container mx-auto py-6 space-y-8">
      <PageHeader
        title={
          <div className="flex items-center">
            {project?.title}
            {project?.is_collaborative && (
              <Badge variant="outline" className="ml-2 bg-blue-50 text-blue-700 border-blue-200">
                <Users className="h-3 w-3 mr-1" />
                Collaborative
              </Badge>
            )}
          </div>
        }
        description={`Created ${project && new Date(project.created_at).toLocaleDateString()}`}
        actions={
          <div className="flex gap-2">
            {project && (
              <ProjectSharingDialog 
                project={project} 
                onUpdate={handleProjectUpdate}
                trigger={
                  <Button variant="outline">
                    <Share2 className="h-4 w-4 mr-2" />
                    Share
                  </Button>
                }
              />
            )}
            <Button 
              variant="default" 
              onClick={() => navigate(`/projects/${projectId}/generate-ideas`)}
            >
              <Lightbulb className="h-4 w-4 mr-2" />
              Generate Ideas
            </Button>
          </div>
        }
        className="flex-col md:flex-row justify-between items-start md:items-center gap-4"
      />

      <TabSystem
        tabs={tabItems}
        defaultValue={activeTab}
        onTabChange={setActiveTab}
        persistKey={`project_tabs_${projectId}`}
        className="space-y-4"
        tabsListClassName="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-2"
      />
    </div>
  );
}
